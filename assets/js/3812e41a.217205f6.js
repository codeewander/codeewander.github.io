"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3322],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),m=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=m(e.components);return r.createElement(p.Provider,{value:t},e.children)},c="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=m(n),d=a,k=c["".concat(p,".").concat(d)]||c[d]||s[d]||o;return n?r.createElement(k,l(l({ref:t},u),{},{components:n})):r.createElement(k,l({ref:t},u))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[c]="string"==typeof e?e:a,l[1]=i;for(var m=2;m<o;m++)l[m]=n[m];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5080:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>s,frontMatter:()=>o,metadata:()=>i,toc:()=>m});var r=n(3117),a=(n(7294),n(3905));const o={id:"leetcode13",title:"LeetCode 13 -  Roman to Integer",keywords:["algorithm","string"]},l=void 0,i={unversionedId:"leetcode/leetcode13",id:"leetcode/leetcode13",title:"LeetCode 13 -  Roman to Integer",description:"- Difficulty: Easy.",source:"@site/docs/leetcode/leetcode13.md",sourceDirName:"leetcode",slug:"/leetcode/leetcode13",permalink:"/docs/leetcode/leetcode13",draft:!1,tags:[],version:"current",frontMatter:{id:"leetcode13",title:"LeetCode 13 -  Roman to Integer",keywords:["algorithm","string"]},sidebar:"Docs",previous:{title:"LeetCode 12 -  Integer to Roman",permalink:"/docs/leetcode/leetcode12"},next:{title:"LeetCode 14 -  Longest Common Prefix",permalink:"/docs/leetcode/leetcode14"}},p={},m=[{value:"Problem",id:"problem",level:2},{value:"Solution",id:"solution",level:2}],u={toc:m},c="wrapper";function s(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Difficulty: Easy."),(0,a.kt)("li",{parentName:"ul"},"Related Topics: Math, String."),(0,a.kt)("li",{parentName:"ul"},"Similar Questions: Integer to Roman.")),(0,a.kt)("h2",{id:"problem"},"Problem"),(0,a.kt)("p",null,"Roman numerals are represented by seven different symbols:\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"I"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"V"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"X"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"L"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"C"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"D")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"M"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Symbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\n")),(0,a.kt)("p",null,"For example,\xa0two is written as ",(0,a.kt)("inlineCode",{parentName:"p"},"II"),"\xa0in Roman numeral, just two one's added together. Twelve is written as, ",(0,a.kt)("inlineCode",{parentName:"p"},"XII"),", which is simply ",(0,a.kt)("inlineCode",{parentName:"p"},"X")," + ",(0,a.kt)("inlineCode",{parentName:"p"},"II"),". The number twenty seven is written as ",(0,a.kt)("inlineCode",{parentName:"p"},"XXVII"),", which is ",(0,a.kt)("inlineCode",{parentName:"p"},"XX")," + ",(0,a.kt)("inlineCode",{parentName:"p"},"V")," + ",(0,a.kt)("inlineCode",{parentName:"p"},"II"),"."),(0,a.kt)("p",null,"Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not ",(0,a.kt)("inlineCode",{parentName:"p"},"IIII"),". Instead, the number four is written as ",(0,a.kt)("inlineCode",{parentName:"p"},"IV"),". Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as ",(0,a.kt)("inlineCode",{parentName:"p"},"IX"),". There are six instances where subtraction is used:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"I")," can be placed before ",(0,a.kt)("inlineCode",{parentName:"li"},"V")," (5) and ",(0,a.kt)("inlineCode",{parentName:"li"},"X")," (10) to make 4 and 9."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"X")," can be placed before ",(0,a.kt)("inlineCode",{parentName:"li"},"L")," (50) and ",(0,a.kt)("inlineCode",{parentName:"li"},"C")," (100) to make 40 and 90."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"C")," can be placed before ",(0,a.kt)("inlineCode",{parentName:"li"},"D")," (500) and ",(0,a.kt)("inlineCode",{parentName:"li"},"M")," (1000) to make 400 and 900.")),(0,a.kt)("p",null,"Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input:\xa0"III"\nOutput: 3\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input:\xa0"IV"\nOutput: 4\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 3:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input:\xa0"IX"\nOutput: 9\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 4:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input:\xa0"LVIII"\nOutput: 58\nExplanation: C = 100, L = 50, XXX = 30 and III = 3.\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 5:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Input:\xa0"MCMXCIV"\nOutput: 1994\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n')),(0,a.kt)("h2",{id:"solution"},"Solution"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * @param {string} s\n * @return {number}\n */\nvar romanToInt = function (s) {\n  let map = {\n    I: 1,\n    IV: 4,\n    V: 5,\n    IX: 9,\n    X: 10,\n    XL: 40,\n    L: 50,\n    XC: 90,\n    C: 100,\n    CD: 400,\n    D: 500,\n    CM: 900,\n    M: 1000,\n  };\n\n  let count = 0;\n\n  for (let i = 0; i < s.length; i++) {\n    if (map[`${s[i]}${s[i + 1]}`]) {\n      count += map[`${s[i]}${s[i + 1]}`];\n      i++;\n    } else {\n      count += map[s[i]];\n    }\n  }\n  return count;\n};\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Complexity:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Time complexity : O(n)."),(0,a.kt)("li",{parentName:"ul"},"Space complexity : O(1).")))}s.isMDXComponent=!0}}]);