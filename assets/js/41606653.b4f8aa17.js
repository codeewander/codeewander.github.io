"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8550],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=r.createContext({}),s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=s(t),c=i,f=m["".concat(p,".").concat(c)]||m[c]||d[c]||a;return t?r.createElement(f,l(l({ref:n},u),{},{components:t})):r.createElement(f,l({ref:n},u))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,l=new Array(a);l[0]=c;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o[m]="string"==typeof e?e:i,l[1]=o;for(var s=2;s<a;s++)l[s]=t[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},6567:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>s});var r=t(3117),i=(t(7294),t(3905));const a={id:"leetcode12",title:"LeetCode 12 -  Integer to Roman",keywords:["algorithm","string"]},l=void 0,o={unversionedId:"leetcode/leetcode12",id:"leetcode/leetcode12",title:"LeetCode 12 -  Integer to Roman",description:"- Difficulty: Medium.",source:"@site/docs/leetcode/leetcode12.md",sourceDirName:"leetcode",slug:"/leetcode/leetcode12",permalink:"/docs/leetcode/leetcode12",draft:!1,tags:[],version:"current",frontMatter:{id:"leetcode12",title:"LeetCode 12 -  Integer to Roman",keywords:["algorithm","string"]},sidebar:"Docs",previous:{title:"LeetCode 01 -  Two Sum",permalink:"/docs/leetcode/leetcode01"},next:{title:"LeetCode 13 -  Roman to Integer",permalink:"/docs/leetcode/leetcode13"}},p={},s=[{value:"Problem",id:"problem",level:2},{value:"Solution 1",id:"solution-1",level:2},{value:"first thought (2023.09.07)",id:"first-thought-20230907",level:2}],u={toc:s},m="wrapper";function d(e){let{components:n,...t}=e;return(0,i.kt)(m,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Difficulty: Medium."),(0,i.kt)("li",{parentName:"ul"},"Related Topics: Math, String."),(0,i.kt)("li",{parentName:"ul"},"Link:",(0,i.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/integer-to-roman"},"leetcode"))),(0,i.kt)("h2",{id:"problem"},"Problem"),(0,i.kt)("p",null,"Roman numerals are represented by seven different symbols:\xa0",(0,i.kt)("inlineCode",{parentName:"p"},"I"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"V"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"X"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"L"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"C"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"D")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"M"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Symbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\n")),(0,i.kt)("p",null,"For example,\xa0two is written as ",(0,i.kt)("inlineCode",{parentName:"p"},"II"),"\xa0in Roman numeral, just two one's added together. Twelve is written as, ",(0,i.kt)("inlineCode",{parentName:"p"},"XII"),", which is simply ",(0,i.kt)("inlineCode",{parentName:"p"},"X")," + ",(0,i.kt)("inlineCode",{parentName:"p"},"II"),". The number twenty seven is written as ",(0,i.kt)("inlineCode",{parentName:"p"},"XXVII"),", which is ",(0,i.kt)("inlineCode",{parentName:"p"},"XX")," + ",(0,i.kt)("inlineCode",{parentName:"p"},"V")," + ",(0,i.kt)("inlineCode",{parentName:"p"},"II"),"."),(0,i.kt)("p",null,"Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not ",(0,i.kt)("inlineCode",{parentName:"p"},"IIII"),". Instead, the number four is written as ",(0,i.kt)("inlineCode",{parentName:"p"},"IV"),". Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as ",(0,i.kt)("inlineCode",{parentName:"p"},"IX"),". There are six instances where subtraction is used:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"I")," can be placed before ",(0,i.kt)("inlineCode",{parentName:"li"},"V")," (5) and ",(0,i.kt)("inlineCode",{parentName:"li"},"X")," (10) to make 4 and 9."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"X")," can be placed before ",(0,i.kt)("inlineCode",{parentName:"li"},"L")," (50) and ",(0,i.kt)("inlineCode",{parentName:"li"},"C")," (100) to make 40 and 90."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"C")," can be placed before ",(0,i.kt)("inlineCode",{parentName:"li"},"D")," (500) and ",(0,i.kt)("inlineCode",{parentName:"li"},"M")," (1000) to make 400 and 900.")),(0,i.kt)("p",null,"Given an integer, convert it to a roman numeral. Input is guaranteed to be within the range from 1 to 3999."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 1:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Input:\xa03\nOutput: "III"\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 2:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Input:\xa04\nOutput: "IV"\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 3:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Input:\xa09\nOutput: "IX"\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 4:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Input:\xa058\nOutput: "LVIII"\nExplanation: C = 100, L = 50, XXX = 30 and III = 3.\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example 5:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Input:\xa01994\nOutput: "MCMXCIV"\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n')),(0,i.kt)("h2",{id:"solution-1"},"Solution 1"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'/**\n * @param {number} num\n * @return {string}\n */\nvar intToRoman = function (num) {\n  const map = [\n    [1, "I"],\n    [4, "IV"],\n    [5, "V"],\n    [9, "IX"],\n    [10, "X"],\n    [40, "XL"],\n    [50, "L"],\n    [90, "XC"],\n    [100, "C"],\n    [400, "CD"],\n    [500, "D"],\n    [900, "CM"],\n    [1000, "M"],\n  ];\n  let result = "";\n  let i = map.length;\n  while (num > 0) {\n    result += map[i][1].repeat(Math.floor(num / map[i][0]));\n    num %= map[i][0];\n    i--;\n  }\n  return result;\n};\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Complexity:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Time complexity : O(log(n))."),(0,i.kt)("li",{parentName:"ul"},"Space complexity : O(1).")),(0,i.kt)("h2",{id:"first-thought-20230907"},"first thought (2023.09.07)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'/**\n * @param {number} num\n * @return {string}\n */\nvar intToRoman = function (num) {\n  let res = "";\n\n  const thousandsDigit = Math.floor(num / 1000);\n  const hundredsDigit = Math.floor((num - thousandsDigit * 1000) / 100);\n  const tensDigit = Math.floor(\n    (num - thousandsDigit * 1000 - hundredsDigit * 100) / 10\n  );\n  const unitsDigit =\n    num - thousandsDigit * 1000 - hundredsDigit * 100 - tensDigit * 10;\n\n  if (thousandsDigit) {\n    for (let i = 0; i < thousandsDigit % 5; i++) {\n      res += "M";\n    }\n  }\n\n  if (hundredsDigit) {\n    // 500\u4ee5\u4e0a\n    if (Math.floor(hundredsDigit / 5)) {\n      // 900\n      if (hundredsDigit % 5 === 4) {\n        res += "CM";\n      } else {\n        res += "D";\n        for (let j = 0; j < hundredsDigit % 5; j++) {\n          res += "C";\n        }\n      }\n    } else {\n      if (hundredsDigit % 5 === 4) {\n        res += "CD";\n      } else {\n        for (let j = 0; j < hundredsDigit % 5; j++) {\n          res += "C";\n        }\n      }\n    }\n  }\n\n  if (tensDigit) {\n    // 50\u4ee5\u4e0a\n    if (Math.floor(tensDigit / 5)) {\n      // 90\n      if (tensDigit % 5 === 4) {\n        res += "XC";\n      } else {\n        res += "L";\n        for (let k = 0; k < tensDigit % 5; k++) {\n          res += "X";\n        }\n      }\n    } else {\n      if (tensDigit % 5 === 4) {\n        res += "XL";\n      } else {\n        for (let l = 0; l < tensDigit % 5; l++) {\n          res += "X";\n        }\n      }\n    }\n  }\n\n  if (unitsDigit) {\n    if (Math.floor(unitsDigit / 5)) {\n      // 90\n      if (unitsDigit % 5 === 4) {\n        res += "IX";\n      } else {\n        res += "V";\n        for (let m = 0; m < unitsDigit % 5; m++) {\n          res += "I";\n        }\n      }\n    } else {\n      if (unitsDigit % 5 === 4) {\n        res += "IV";\n      } else {\n        for (let n = 0; n < unitsDigit % 5; n++) {\n          res += "I";\n        }\n      }\n    }\n  }\n\n  return res;\n};\n')))}d.isMDXComponent=!0}}]);