"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[447],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,p=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),u=s(n),f=o,d=u["".concat(p,".").concat(f)]||u[f]||m[f]||l;return n?r.createElement(d,i(i({ref:t},c),{},{components:n})):r.createElement(d,i({ref:t},c))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,i=new Array(l);i[0]=f;var a={};for(var p in t)hasOwnProperty.call(t,p)&&(a[p]=t[p]);a.originalType=e,a[u]="string"==typeof e?e:o,i[1]=a;for(var s=2;s<l;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},4158:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>a,toc:()=>s});var r=n(3117),o=(n(7294),n(3905));const l={id:"leetcode14",title:"LeetCode 14 -  Longest Common Prefix",keywords:["algorithm","string"]},i=void 0,a={unversionedId:"leetcode/leetcode14",id:"leetcode/leetcode14",title:"LeetCode 14 -  Longest Common Prefix",description:"- Difficulty: Easy.",source:"@site/docs/leetcode/leetcode14.md",sourceDirName:"leetcode",slug:"/leetcode/leetcode14",permalink:"/docs/leetcode/leetcode14",draft:!1,tags:[],version:"current",frontMatter:{id:"leetcode14",title:"LeetCode 14 -  Longest Common Prefix",keywords:["algorithm","string"]},sidebar:"Docs",previous:{title:"LeetCode 13 -  Roman to Integer",permalink:"/docs/leetcode/leetcode13"},next:{title:"LeetCode 26 - Remove Duplicates From Sorted Array",permalink:"/docs/leetcode/leetcode26"}},p={},s=[{value:"Problem",id:"problem",level:2},{value:"Solution 1",id:"solution-1",level:2},{value:"Solution 2",id:"solution-2",level:2}],c={toc:s},u="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Difficulty: Easy."),(0,o.kt)("li",{parentName:"ul"},"Related Topics: String."),(0,o.kt)("li",{parentName:"ul"},"Link: ",(0,o.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/longest-common-prefix"},"leetcode"))),(0,o.kt)("h2",{id:"problem"},"Problem"),(0,o.kt)("p",null,"Write a function to find the longest common prefix string amongst an array of strings."),(0,o.kt)("p",null,"If there is no common prefix, return an empty string ",(0,o.kt)("inlineCode",{parentName:"p"},'""'),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Input: ["flower","flow","flight"]\nOutput: "fl"\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Input: ["dog","racecar","car"]\nOutput: ""\nExplanation: There is no common prefix among the input strings.\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note:")),(0,o.kt)("p",null,"All given inputs are in lowercase letters ",(0,o.kt)("inlineCode",{parentName:"p"},"a-z"),"."),(0,o.kt)("h2",{id:"solution-1"},"Solution 1"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * @param {string[]} strs\n * @return {string}\n */\nvar longestCommonPrefix = function (strs) {\n  for (let i = 0; i < strs[0].length; i++) {\n    for (let j = 1; j < strs.length; j++) {\n      if (strs[0][i] !== strs[j][i]) {\n        return strs[0].slice(0, i);\n      }\n    }\n  }\n  return strs[0];\n};\n")),(0,o.kt)("h2",{id:"solution-2"},"Solution 2"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"var longestCommonPrefix = function (strs) {\n  let prefix = strs[0];\n\n  for (let i = 1; i < strs.length; i++) {\n    while (strs[i].indexOf(prefix) !== 0) {\n      prefix = prefix.substring(0, prefix.length - 1);\n    }\n  }\n  return prefix;\n};\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Complexity:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Time complexity : O(n^2)."),(0,o.kt)("li",{parentName:"ul"},"Space complexity : O(1).")))}m.isMDXComponent=!0}}]);