"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3238],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},s="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),s=p(n),y=o,d=s["".concat(c,".").concat(y)]||s[y]||m[y]||l;return n?r.createElement(d,a(a({ref:t},u),{},{components:n})):r.createElement(d,a({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,a=new Array(l);a[0]=y;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[s]="string"==typeof e?e:o,a[1]=i;for(var p=2;p<l;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},3068:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var r=n(3117),o=(n(7294),n(3905));const l={id:"leetcode121",title:"LeetCode 121 - Best Time to Buy and Sell Stock",keywords:["algorithm","array"]},a=void 0,i={unversionedId:"leetcode/leetcode121",id:"leetcode/leetcode121",title:"LeetCode 121 - Best Time to Buy and Sell Stock",description:"- Difficulty: Easy.",source:"@site/docs/leetcode/leetcode121.md",sourceDirName:"leetcode",slug:"/leetcode/leetcode121",permalink:"/docs/leetcode/leetcode121",draft:!1,tags:[],version:"current",frontMatter:{id:"leetcode121",title:"LeetCode 121 - Best Time to Buy and Sell Stock",keywords:["algorithm","array"]},sidebar:"Docs",previous:{title:"LeetCode 88 - Merge Sorted Array",permalink:"/docs/leetcode/leetcode88"},next:{title:"LeetCode 125 - Valid Palindrome",permalink:"/docs/leetcode/leetcode125"}},c={},p=[{value:"Problem",id:"problem",level:2},{value:"Solution (Best)",id:"solution-best",level:2},{value:"Solution 2 (exceed time limit)",id:"solution-2-exceed-time-limit",level:2}],u={toc:p},s="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(s,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Difficulty: Easy."),(0,o.kt)("li",{parentName:"ul"},"Related Topics: Array, Dynamic Programming."),(0,o.kt)("li",{parentName:"ul"},"Link: ",(0,o.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/best-time-to-buy-and-sell-stock"},"leetcode"))),(0,o.kt)("h2",{id:"problem"},"Problem"),(0,o.kt)("p",null,"Say you have an array for which the ",(0,o.kt)("strong",{parentName:"p"},"i"),"th element is the price of a given stock on day ",(0,o.kt)("strong",{parentName:"p"},"i"),"."),(0,o.kt)("p",null,"If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit."),(0,o.kt)("p",null,"Note that you cannot sell a stock before you buy one."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: [7,1,5,3,6,4]\nOutput: 5\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\n\xa0            Not 7-1 = 6, as selling price needs to be larger than buying price.\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transaction is done, i.e. max profit = 0.\n")),(0,o.kt)("h2",{id:"solution-best"},"Solution (Best)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * @param {number[]} prices\n * @return {number}\n */\nvar maxProfit = function (prices) {\n  let maxProfit = 0;\n  let minPrice = Number.MAX_SAFE_INTEGER;\n\n  if (prices.length < 2) return maxProfit;\n\n  for (let buyDay = 0; buyDay < prices.length; buyDay++) {\n    if (prices[buyDay] < minPrice) {\n      minPrice = prices[buyDay];\n    } else if (prices[buyDay] - minPrice > maxProfit) {\n      maxProfit = prices[buyDay] - minPrice;\n    }\n  }\n\n  return maxProfit;\n};\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Complexity:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Time complexity : O(n)."),(0,o.kt)("li",{parentName:"ul"},"Space complexity : O(1).")),(0,o.kt)("h2",{id:"solution-2-exceed-time-limit"},"Solution 2 (exceed time limit)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * @param {number[]} prices\n * @return {number}\n */\nvar maxProfit = function (prices) {\n  let maxProfit = 0;\n\n  if (prices.length < 2) return maxProfit;\n\n  for (let buyDay = 0; buyDay < prices.length; buyDay++) {\n    for (let sellDay = buyDay + 1; sellDay < prices.length; sellDay++) {\n      if (prices[sellDay] - prices[buyDay] > maxProfit) {\n        maxProfit = prices[sellDay] - prices[buyDay];\n      }\n    }\n  }\n\n  return maxProfit;\n};\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Complexity:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Time complexity : O(n\xb2)."),(0,o.kt)("li",{parentName:"ul"},"Space complexity : O(1).")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Explain:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u7576\u5929\u6578\u5c0f\u65bc 2 \u5929\u6642\uff0c\u76f4\u63a5 return 0"),(0,o.kt)("li",{parentName:"ul"},"solution 2 \u7576\u9663\u5217\u5143\u7d20\u591a\u7684\u6642\u5019\u6703\u8d85\u904e\u6642\u9593\u9650\u5236\uff0c\u6548\u80fd\u4e0d\u597d")))}m.isMDXComponent=!0}}]);